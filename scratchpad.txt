Todos
=====
- Experiment with changing closure compiler's role in the production build.  There is no
way to do a direct integration with webpack. Need to break up the code into four bundles: bootstrap.js, ie8polyfill.js,
html5polyfill.js, and kidcompy.js.  These bundles should have 3 different build types for loading into different
target environments:
  - Development testing mode: no minification. bootstrap.js directly includes ie8polyfill.js, html5polyfill.js, and
    kidcompy.js contents.  Webpack bundling is setup to facilitate straightforward hot-redeploy and CI rather than mimic
    the script separations found in the production builds
  - Production testing mode:  webpack used to bundle bootstrap.js, uglify.js for mangling and minification.  Closure
    compiler or UglifyJS used for ie8polyfill.js, html5polyfill.js.  Closure Compiler used for kidcompy.js CommonJS-mode
    mangling, optimization, and minification.  kidcompy.js will be bundled along with all of its karma unit and
    functional tests.  Karma loads bootstrap.js which then ajaxically loads the remaining scripts as needed.  Karma
    server will be launched directly on bootstrap.js rather than using webpack's karma integration.  bootstrap.js will
    bundle to a standalone script that can execute without a webpack-dev-server to host it
  - Production bundle mode:  webpack used to bundle bootstrap.js, uglify.js for mangling and minification.  Closure
    compiler or UglifyJS used for ie8polyfill.js, html5polyfill.js.  Closure Compiler used for kidcompy.js CommonJS-mode
    mangling, optimization, and minification.  A host page will load bootstrap.js which will then ajaxically load all
    remaining scripts as needed
- Start a developer blog
  - Jekyll?  Tumblr?
  - Introduce clubcompy, tell a bit of its history
  - can we point woldie.com at the developer blog?
- Do some initial design work on paper or in the clubcompy wiki that we can use to kick-off proper TDD development
  - Playfield, FlipBuffer, Display?
- Initial development
- Get everything running
- Merge to master, delete develop branch, and do a proper release
  - Branch, build, remove dist line from .gitignore, push, tag, delete branch, back to master?

Daily Kidcompy developer steps
==============================
1. 'git pull'
2. Add any new ideas you have for features or technical work items to the parking lot so we can discuss and prioritize
   them
3. Identify work items from Todos that will be worked on today, update or elaborate as needed
4. In a terminal, run 'gulp dev' (or 'gulp integration' if you want to TDD with the integration tests as well)
  * Once Karma starts, capture more browsers for running tests as needed by going to http://localhost:9876/
  * Once the Harness starts, harness more browsers as needed by going to http://localhost:8080/
5. TDD+H:  Red, Green, Refactor, Harness
  * Little 'git commit's as you go, baby steps.
  * The code should always pass tests/bundle successfully or it should be disabled with a feature toggle before commit
  * The harness is a sandbox for the feature you are working on.  Use it to experiment with css styles, scripts and
    markup
6. At the end of the day or when a work item is complete
  * Tweak feature toggles if necessary: is it time to enable previously dev-only flags in the production builds?
  * 'gulp build' and make sure all lints and tests pass
  * Spot check that the harness app is still functional, would be nice if this was never broken
7. If the status of work items changed, update scratchpad.txt accordingly
8. Do any final commits and 'git push'
9. Update any issue tickets at github or tag releases as needed
10. Repeat or go to bed  ;)


Parking lot or rocket science stuff that is too much research/effort to work on immediately
===========================================================================================


Annoying things that annoy me
=============================
- On windows, it seems like the ctrl-c handler doesn't allow me to shutdown the web driver for the code harness.
Windows devs will have to close the harness Firefox instance manually.


Other Thoughts
==============
Trunk-based development, Closure Compiler dead code elimination, feature flags are all complementary
