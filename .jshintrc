{
  // JSHint Default Configuration File (as on JSHint website)
  // See http://jshint.com/docs/ for more details

  "maxerr"        : 50,       // {int} Maximum error before stopping

  // ================================================================================================================
  // Enforcing (generally expect more true than false in this section here if we want to implement strict JavaScript)
  "bitwise"       : true,     // true: Prohibit bitwise operators (&, |, ^, etc.)
  "curly"         : true,     // true: Require {} for every new block or scope
  "eqeqeq"        : true,     // true: Require triple equals (===) for comparison
  "es3"           : true,     // true: Code needs to adhere to ECMAScript 3 specification (IE 6/7/8/9)
  "es5"           : false,    // true: Allow ES5 syntax (ex: getters and setters)
  "forin"         : true,     // true: Require filtering for..in loops with obj.hasOwnProperty()
  "freeze"        : false,    // true: Prohibits overwriting prototypes of native objects such as Array, Date and so on
  "latedef"       : true,     // true: Require variables/functions to be defined before being used
  "noarg"         : true,     // true: Prohibit use of `arguments.caller` and `arguments.callee`
  "nocomma"       : false,    // true: Prohibits the use of the comma operator. When misused, the comma operator can obscure the value of a statement and promote incorrect code.
  "nonew"         : true,     // true: Prohibit use of constructors for side-effects (without assignment)
  "nonbsp"        : true,     // true: warns about "non-breaking whitespace" characters
  "undef"         : true,     // true: Require all non-global variables to be declared (prevents global leaks)
  "unused"        : false,    // Warns when you define and never use your variables
    // true: Require all defined variables be used
    // "vars": only check for variables, not function parameters
    // "strict": check all variables and parameters
  "strict"        : true,     // true: Requires all functions run in ES5 Strict Mode
  "maxparams"     : false,    // {int} Max number of formal params allowed per function
  "maxdepth"      : false,    // {int} Max depth of nested blocks (within functions)
  "maxstatements" : false,    // {int} Max number statements per function
  "maxcomplexity" : 10,       // {int} Max cyclomatic complexity per function
  "futurehostile" : true,     // enables warnings about the use of identifiers which are defined in future versions of JavaScript
  "singleGroups"  : true,     // true: Prohibits the use of the grouping operator when it is not strictly required. Such usage commonly reflects a misunderstanding of unary operators

  // ======================================================================================================
  // Relaxing  (generally more false than true's in this section if we want to implement strict JavaScript)
  "asi"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)
  "boss"          : false,     // true: Tolerate assignments where comparisons would be expected
  "debug"         : false,     // true: Allow debugger statements e.g. browser breakpoints.
  "elision"       : false,     // true: Allow ES3 array elision elements
  "eqnull"        : false,     // true: Tolerate use of `== null`
  "esnext"        : true,      // true: Allow ES.next (ES6) syntax (ex: `const`)
  "moz"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)
                               //       (ex: `for each`, multiple try/catch, function expressionâ€¦)
  "evil"          : false,     // true: Tolerate use of `eval` and `new Function()`
  "expr"          : true,      // true: Tolerate `ExpressionStatement` as Programs
  "funcscope"     : false,     // true: Tolerate defining variables inside control statements
  "globalstrict"  : false,     // true: Allow global "use strict" (also enables 'strict')
  "iterator"      : false,     // true: Tolerate using the `__iterator__` property
  "lastsemic"     : false,     // true: Tolerate omitting a semicolon for the last statement of a 1-line block
  "notypeof"      : false,     // true: Suppresses warnings about invalid typeof operator values
  "loopfunc"      : false,     // true: Tolerate functions being defined in loops
  "noyield"       : false,     // true: Suppresses warnings about generator functions with no yield statement in them
  "plusplus"      : false,     // true: Prohibit use of `++` & `--`
  "proto"         : false,     // true: Tolerate using the `__proto__` property
  "scripturl"     : false,     // true: Tolerate script-targeted URLs
  "shadow"        : "outer",   // suppresses warnings about variable shadowing i.e. declaring a variable that had been already declared somewhere in the outer scope
    // "inner" - check for variables defined in the same scope only
    // "outer" - check for variables defined in outer scopes as well
    // false - same as inner
    // true - allow variable shadowing
  "strict"        : false,     // true: Enables strict mode for function scope only
  "supernew"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`
  "validthis"     : false,     // true: Tolerate using this in a non-constructor function
  "withstmt"      : false,     // true: Suppresses warnings about the use of the with statement

  // deprecated features
  "sub"           : true,     // false: Complain about the use of [name] when a the dot operator could be used

  // ==================================================================================================
  // Environments
  "browser"       : true,      // Web Browser (window, document, etc)
  "browserify"    : false,     // Browserify (node.js code in the browser)
  "couch"         : false,     // CouchDB
  "devel"         : true,      // Development/debugging (alert, confirm, etc)
  "dojo"          : false,     // Dojo Toolkit
  "jasmine"       : false,     // Defines globals exposed by the Jasmine unit testing framework
  "jquery"        : false,     // jQuery
  "mootools"      : false,     // MooTools
  "mocha"         : true,      // Defines globals exposed by the "BDD" and "TDD" UIs of the Mocha unit testing framework
  "node"          : true,      // Node.js
  "nonstandard"   : true,      // Widely adopted globals (escape, unescape, etc)
  "phantom"       : false,     // Defines globals available when your core is running inside of the PhantomJS runtime environment
  "prototypejs"   : false,     // Prototype and Scriptaculous
  "qunit"         : false,     // defines globals exposed by the QUnit unit testing framework
  "typed"         : false,     // Defines globals for typed array constructors
  "rhino"         : false,     // Rhino
  "shelljs"       : false,     // Defines globals exposed by the ShellJS library
  "worker"        : false,     // Web Workers
  "wsh"           : false,     // Windows Scripting Host
  "yui"           : false,     // Yahoo User Interface

  // Custom Globals
  "globals"       : {          // additional predefined global variables
    "require": false,
    "module": false,
    "exports": false,
    "global": false,
    "proclaim": false,         // Provided to tests by karma-proclaim
    "sinon": false,
    "expect": false,
    "JSON": false,
    "featureFlags": false,
    "kidcompy": false,
    "quixote": false,
    "ActiveXObject": false,
    "GIT_USERNAME": false,
    "PRODUCTION_MODE": false,
    "SPLIT_BUNDLES": false,
    "BUILD_VERSION": false,
    "FEATURE_FLAG_SUMMARY": false
  }
}
